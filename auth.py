from datetime import datetime, timedelta
import os
from typing import Optional
from jose import JWTError, jwt
from passlib.context import CryptContext
from fastapi.security import OAuth2PasswordBearer
from fastapi import Depends, HTTPException, status
from models import TokenData
from database import get_db, UsuarioRH as UsuarioRHDB
from sqlalchemy.orm import Session

# üîê Carregando Configura√ß√µes Seguras do .env
SECRET_KEY = os.getenv("SECRET_KEY")
ALGORITHM = os.getenv("ALGORITHM", "HS256")
ACCESS_TOKEN_EXPIRE_MINUTES = int(os.getenv("ACCESS_TOKEN_EXPIRE_MINUTES", 30))

if not SECRET_KEY:
    raise ValueError("SECRET_KEY n√£o est√° definida no .env!")

# üîí Configura√ß√£o de Criptografia de Senha
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# üîë Configura√ß√£o do OAuth2 para autentica√ß√£o via Swagger
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/api/v1/rh/login", scheme_name="Bearer")

# üîë Fun√ß√£o para criar hash de senha
def criar_hash_senha(senha: str) -> str:
    """Gera um hash seguro para a senha."""
    return pwd_context.hash(senha)

# üîç Fun√ß√£o para verificar senha
def verificar_senha(senha: str, hash_senha: str) -> bool:
    """Verifica se a senha fornecida corresponde ao hash armazenado."""
    return pwd_context.verify(senha, hash_senha)

# üè∑Ô∏è Fun√ß√£o para criar token JWT
def criar_access_token(data: dict) -> str:
    """
    Cria um token JWT para autentica√ß√£o.
    :param data: Dados a serem codificados no token.
    :return: Token JWT como string.
    """
    to_encode = data.copy()
    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    to_encode.update({"exp": expire})
    
    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)

# üîì Fun√ß√£o para obter usu√°rio atual com base no token JWT
async def get_usuario_atual(
    token: str = Depends(oauth2_scheme), 
    db: Session = Depends(get_db)
) -> Optional[UsuarioRHDB]:
    """
    Obt√©m o usu√°rio autenticado com base no token JWT.
    :param token: Token JWT do usu√°rio.
    :param db: Sess√£o do banco de dados.
    :return: Usu√°rio autenticado.
    """
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Token inv√°lido ou expirado",
        headers={"WWW-Authenticate": "Bearer"},
    )
    
    try:
        # Decodifica o token JWT
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        email: Optional[str] = payload.get("sub")
        nivel_acesso: Optional[str] = payload.get("nivel")

        if not email or not nivel_acesso:
            raise credentials_exception

        token_data = TokenData(email=email, nivel_acesso=nivel_acesso)

    except JWTError as e:
        print(f"[ERRO JWT] {str(e)}")  # Log de erro
        raise credentials_exception
    
    # Verifica se o usu√°rio existe no banco de dados
    usuario = db.query(UsuarioRHDB).filter(UsuarioRHDB.email == token_data.email).first()
    
    if not usuario:
        print(f"[ERRO] Usu√°rio n√£o encontrado: {token_data.email}")  # Log para debug
        raise credentials_exception
        
    return usuario

# üîê Fun√ß√£o para verificar se o usu√°rio √© administrador
async def get_usuario_admin(usuario_atual: UsuarioRHDB = Depends(get_usuario_atual)) -> UsuarioRHDB:
    """
    Verifica se o usu√°rio autenticado tem permiss√£o de administrador.
    :param usuario_atual: Usu√°rio autenticado.
    :return: Usu√°rio se for admin.
    """
    if usuario_atual.nivel_acesso != "admin":
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Acesso restrito a administradores"
        )
    return usuario_atual
